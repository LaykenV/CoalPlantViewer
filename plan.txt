# Coal Plant 3D Viewer - Implementation Plan

## Project Setup & Dependencies

1. **Create a new Next.js project**
   ```bash
   npx create-next-app coal-plant-3d-viewer
   cd coal-plant-3d-viewer
   ```

2. **Install necessary dependencies**
   ```bash
   npm install three @react-three/fiber @react-three/drei @types/three
   ```
   - `three`: The core Three.js library
   - `@react-three/fiber`: React renderer for Three.js
   - `@react-three/drei`: Useful helpers for React Three Fiber
   - `@types/three`: TypeScript definitions for Three.js

3. **Setup file upload handling**
   ```bash
   npm install react-dropzone
   ```

## Project Structure

```
coal-plant-3d-viewer/
├── public/
│   ├── textures/           # Store textures for materials
│   └── models/             # Any pre-built 3D models
├── src/
│   ├── components/
│   │   ├── FileUpload.js   # File upload component
│   │   ├── Viewer3D.js     # Main 3D viewer component
│   │   ├── Controls.js     # Camera controls component
│   │   └── PlantObjects/   # Components for different plant objects
│   │       ├── Building.js
│   │       ├── Equipment.js
│   │       ├── Silo.js
│   │       └── ...
│   ├── lib/
│   │   ├── dataProcessor.js # Process uploaded data
│   │   └── three/          # Three.js utility functions
│   │       ├── lights.js
│   │       ├── materials.js
│   │       └── scene.js
│   ├── pages/
│   │   ├── index.js        # Landing page with upload
│   │   └── viewer.js       # 3D viewer page
│   └── styles/
└── ...
```

## Implementation Steps

### 1. Create File Upload Component

Create a component that allows users to upload JSON data files:

```jsx
// src/components/FileUpload.js
import { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { useRouter } from 'next/router';

export default function FileUpload() {
  const router = useRouter();
  const [error, setError] = useState(null);
  
  const onDrop = useCallback(acceptedFiles => {
    const file = acceptedFiles[0];
    const reader = new FileReader();
    
    reader.onload = async (event) => {
      try {
        const data = JSON.parse(event.target.result);
        // Store data in localStorage for simplicity
        // For larger data, consider context API or state management
        localStorage.setItem('plantData', JSON.stringify(data));
        router.push('/viewer');
      } catch (err) {
        setError('Invalid JSON file');
      }
    };
    
    reader.readAsText(file);
  }, [router]);
  
  const { getRootProps, getInputProps, isDragActive } = useDropzone({ 
    onDrop,
    accept: {
      'application/json': ['.json']
    },
    maxFiles: 1
  });
  
  return (
    <div className="container mx-auto p-4">
      <div 
        {...getRootProps()} 
        className="border-2 border-dashed border-gray-300 p-8 text-center rounded-lg cursor-pointer hover:border-blue-500"
      >
        <input {...getInputProps()} />
        {isDragActive ? (
          <p>Drop the files here...</p>
        ) : (
          <p>Drag and drop a JSON file here, or click to select a file</p>
        )}
      </div>
      {error && <p className="text-red-500 mt-2">{error}</p>}
    </div>
  );
}
```

### 2. Setup the 3D Viewer Component

Create the core 3D viewer component using React Three Fiber:

```jsx
// src/components/Viewer3D.js
import { useState, useEffect } from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, Grid, Environment } from '@react-three/drei';
import Building from './PlantObjects/Building';
import Equipment from './PlantObjects/Equipment';
import Silo from './PlantObjects/Silo';

export default function Viewer3D() {
  const [plantData, setPlantData] = useState(null);
  
  useEffect(() => {
    // Get data from localStorage
    const data = localStorage.getItem('plantData');
    if (data) {
      setPlantData(JSON.parse(data));
    }
  }, []);
  
  if (!plantData) return <div>No data loaded. Please upload a plant data file.</div>;
  
  return (
    <div className="w-full h-screen">
      <Canvas
        camera={{ position: [30, 30, 30], fov: 50 }}
        shadows
      >
        <ambientLight intensity={0.5} />
        <directionalLight 
          position={[10, 10, 10]}
          intensity={1}
          castShadow
          shadow-mapSize-width={2048}
          shadow-mapSize-height={2048}
        />
        
        {/* Grid for reference */}
        <Grid 
          infiniteGrid
          cellSize={1}
          sectionSize={10}
          fadeDistance={50}
        />
        
        {/* Render buildings */}
        {plantData.buildings && plantData.buildings.map(building => (
          <Building key={building.id} data={building} />
        ))}
        
        {/* Render equipment */}
        {plantData.structures && plantData.structures.map(structure => {
          if (structure.type === 'silo') {
            return <Silo key={structure.id} data={structure} />;
          }
          return <Equipment key={structure.id} data={structure} />;
        })}
        
        {/* Render misc items */}
        {plantData.misc && plantData.misc.map(item => (
          <Equipment key={item.id} data={item} />
        ))}
        
        {/* Camera controls */}
        <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />
        <Environment preset="warehouse" />
      </Canvas>
    </div>
  );
}
```

### 3. Create Object Components

Create components for each type of object. Here's an example for buildings:

```jsx
// src/components/PlantObjects/Building.js
import { useRef } from 'react';
import { Box } from '@react-three/drei';

export default function Building({ data }) {
  const meshRef = useRef();
  const { position, dimensions, name } = data;
  
  return (
    <group position={[position.x, position.y, position.z]}>
      <Box
        ref={meshRef}
        args={[dimensions.width, dimensions.height, dimensions.depth]}
        receiveShadow
        castShadow
      >
        <meshStandardMaterial 
          color="#888888" 
          metalness={0.1}
          roughness={0.7}
        />
      </Box>
      
      {/* Optional: Add label for the building */}
      <Html position={[0, dimensions.height / 2 + 1, 0]}>
        <div className="text-white bg-black bg-opacity-50 p-1 rounded text-xs">
          {name}
        </div>
      </Html>
    </group>
  );
}
```

Similarly, create components for Silos and Equipment.

### 4. Setup Pages

Create the main pages for the application:

```jsx
// src/pages/index.js
import Head from 'next/head';
import FileUpload from '../components/FileUpload';

export default function Home() {
  return (
    <div>
      <Head>
        <title>Coal Plant 3D Viewer</title>
        <meta name="description" content="Upload and view 3D models of coal plant floors" />
      </Head>
      
      <main className="min-h-screen flex flex-col items-center justify-center p-4">
        <h1 className="text-3xl font-bold mb-8">Coal Plant 3D Viewer</h1>
        <div className="w-full max-w-lg">
          <FileUpload />
        </div>
      </main>
    </div>
  );
}
```

```jsx
// src/pages/viewer.js
import { useRouter } from 'next/router';
import Head from 'next/head';
import Viewer3D from '../components/Viewer3D';

export default function ViewerPage() {
  const router = useRouter();
  
  return (
    <div>
      <Head>
        <title>Coal Plant 3D View</title>
      </Head>
      
      <div className="fixed top-4 left-4 z-10">
        <button
          onClick={() => router.push('/')}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Back to Upload
        </button>
      </div>
      
      <Viewer3D />
    </div>
  );
}
```

### 5. Add Controls and Interactivity

Implement controls for camera movement, object visibility, etc.:

```jsx
// src/components/Controls.js
export default function Controls({ plantData, setVisibility }) {
  return (
    <div className="fixed top-4 right-4 bg-white p-4 rounded shadow z-10">
      <h3 className="font-bold mb-2">Controls</h3>
      
      <div className="space-y-2">
        <div>
          <label className="flex items-center">
            <input 
              type="checkbox" 
              checked={visibility.buildings}
              onChange={() => setVisibility(prev => ({
                ...prev, 
                buildings: !prev.buildings
              }))}
              className="mr-2"
            />
            Show Buildings
          </label>
        </div>
        
        <div>
          <label className="flex items-center">
            <input 
              type="checkbox" 
              checked={visibility.equipment}
              onChange={() => setVisibility(prev => ({
                ...prev, 
                equipment: !prev.equipment
              }))}
              className="mr-2"
            />
            Show Equipment
          </label>
        </div>
        
        {/* Add more controls as needed */}
      </div>
    </div>
  );
}
```

### 6. Create a Data Example Loader

For testing purposes, create a component to load example data:

```jsx
// src/components/ExampleLoader.js
import { useRouter } from 'next/router';

export default function ExampleLoader() {
  const router = useRouter();
  const loadExample = () => {
    // This is our example data from earlier
    const exampleData = {
      // Your coal plant data object here
    };
    
    localStorage.setItem('plantData', JSON.stringify(exampleData));
    router.push('/viewer');
  };
  
  return (
    <div className="mt-8 text-center">
      <p className="mb-2">Or try with an example:</p>
      <button
        onClick={loadExample}
        className="bg-gray-200 px-4 py-2 rounded hover:bg-gray-300"
      >
        Load Example Data
      </button>
    </div>
  );
}
```

## Export/Import Functionality

Add functionality to save and load projects:

```jsx
// src/components/Toolbar.js
export default function Toolbar({ plantData }) {
  const exportData = () => {
    const dataStr = JSON.stringify(plantData, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = 'coal-plant-data.json';
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };
  
  return (
    <div className="fixed bottom-4 left-4 z-10">
      <button
        onClick={exportData}
        className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
      >
        Export Data
      </button>
    </div>
  );
}
```

## Testing and Deployment

1. **Run development server**
   ```bash
   npm run dev
   ```

2. **Build for production**
   ```bash
   npm run build
   ```

3. **Deploy to Vercel**
   ```bash
   npm install -g vercel
   vercel
   ```

## Enhancements & Future Features

1. **Performance Optimization**
   - Implement level of detail (LOD) for complex models
   - Add object instancing for repeated elements

2. **Interaction Improvements**
   - Add object selection and information display
   - Implement first-person navigation mode

3. **Visual Enhancements**
   - Add realistic materials and textures
   - Implement proper lighting and shadows

4. **Data Management**
   - Add server-side storage for large models
   - Implement project saving and loading